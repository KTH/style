/**
 * Generate a Sass file in `tokens/icons-raw.scss` from `icons` library
 */

// @ts-check
import { optimize } from "svgo";
import { readdir, readFile } from "node:fs/promises";
import { createWriteStream } from "node:fs";

/**
 * Generates the icons. A single file "/scss/tokens/icons-raw.scss" from
 * everything contained in "/icons/figma"
 */
async function generateIcons() {
  /** @type {import("svgo").Config} */
  const config = {
    datauri: "enc",
    plugins: ["preset-default"],
  };

  const iconsPath = new URL("../icons/figma/", import.meta.url);
  const outputFile = new URL("../scss/tokens/icons-raw.scss", import.meta.url);

  const writer = createWriteStream(outputFile);
  await new Promise((resolve) => writer.on("open", resolve));

  writer.write(
    "/* This file is autogenerated with `scripts/generate-icons.mjs */\n",
  );

  for (const fileName of await readdir(iconsPath)) {
    const fileContent = await readFile(new URL(fileName, iconsPath), {
      encoding: "utf-8",
    });

    const svg = optimize(fileContent, config);

    writer.write(`$icon-${fileName.slice(0, -4)}: url("${svg.data}");\n`);
  }
  writer.end();

  return new Promise((resolve) => writer.on("finish", resolve));
}

/**
 * Generate the logotype
 */
async function generateLogotype() {
  /** @type {import("svgo").Config} */
  const config = {
    plugins: ["preset-default"],
  };

  const iconsPath = new URL("../icons/logotype/", import.meta.url);
  const outputPath = new URL("../assets/logotype/", import.meta.url);

  for (const fileName of await readdir(iconsPath)) {
    const fileContent = await readFile(new URL(fileName, iconsPath), {
      encoding: "utf-8",
    });
    const writer = createWriteStream(new URL(fileName, outputPath));
    await new Promise((resolve) => writer.on("open", resolve));

    const svg = optimize(fileContent, config);

    writer.write(svg.data);
    writer.end();
    await new Promise((resolve) => writer.on("finish", resolve));
  }
}

await generateIcons();
await generateLogotype();
