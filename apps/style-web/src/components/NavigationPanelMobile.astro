---
// This `NavigationPanel` component is NOT the KTH Style NavigationPanel.
//
// This component is used exclusively on kth style web to be able to
// demonstrate how can you use KTH Style components in your projects
interface Props {
  label: string;
  dataId: string;
}

const { label, dataId } = Astro.props;
---

<div>
  <a href="/" data-id={dataId} class="kth-header-menu-item--modal">
    <span>{label}</span>
  </a>
  <dialog class="kth-header-panel--modal">
    <button class="kth-button close">
      <span class="kth-visually-hidden">Close</span>
    </button>
    <div class="kth-header-panel__content"></div>
  </dialog>
</div>

<script>
  // This code is for reading blocks from Cortina
  document
    .querySelectorAll(".kth-header-menu-item--modal[data-id]")
    .forEach((menuItem) => {
      const dialog = menuItem.nextElementSibling;
      const dialogContent = dialog?.querySelector(".kth-header-panel__content");

      if (!(menuItem instanceof HTMLElement)) {
        return;
      }

      if (!(dialog instanceof HTMLDialogElement)) {
        return;
      }

      const cortinaBlockId = menuItem.dataset.id;

      // We declare the Promise outside of the listener.
      // That way, if the promise has been initiated, we don't do a re-fetch
      let p: Promise<string> | undefined = undefined;

      function loadPanelContent() {
        if (!(dialogContent instanceof HTMLElement)) {
          return;
        }

        if (!p) {
          // Fetch only if the promise has not started
          console.log(`Fetching block ${cortinaBlockId}`);
          p = fetch(`/cm/${cortinaBlockId}`).then((r) => r.text());
        }

        p.then((body) => {
          dialogContent.innerHTML = body;
        });
      }

      menuItem.addEventListener("mouseover", loadPanelContent);
      menuItem.addEventListener("click", loadPanelContent);
    });
</script>
