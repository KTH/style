---
// This `NavigationPanel` component is NOT the KTH Style NavigationPanel.
//
// This component is used exclusively on kth style web to be able to

import { getLangFromUrl, useTranslations } from "src/i18n/utils";

// demonstrate how can you use KTH Style components in your projects
interface Props {
  dataId: string;
  href: string;
  label: string;
}

const { dataId, href, label } = Astro.props;
const t = useTranslations(getLangFromUrl(Astro.url));
---

<div>
  <a href="/" data-id={dataId} class="kth-menu-item dropdown">
    <span>{label}</span>
  </a>
  <dialog class="kth-menu-panel">
    <div class="kth-menu-panel__container">
      <div class="kth-menu-panel__header">
        <div>
          <h1>{label}</h1>
          <a href={href}>Start</a>
        </div>
        <button class="kth-icon-button close">
          <span class="kth-visually-hidden">{t("close")}</span>
        </button>
      </div>
      <div class="kth-menu-panel__content"></div>
    </div>
  </dialog>
</div>

<script>
  import { getLangFromUrl } from "src/i18n/utils";
  // This code is for reading blocks from Cortina
  const lang = getLangFromUrl(new URL(window.location.href));

  document.querySelectorAll(".kth-menu-item[data-id]").forEach((menuItem) => {
    const dialog = menuItem.nextElementSibling;
    const dialogContent = dialog?.querySelector(".kth-menu-panel__content");

    if (!(menuItem instanceof HTMLElement)) {
      return;
    }

    if (!(dialog instanceof HTMLDialogElement)) {
      return;
    }

    const cortinaBlockId = menuItem.dataset.id;

    // We declare the Promise outside of the listener.
    // That way, if the promise has been initiated, we don't do a re-fetch
    let p: Promise<string> | undefined = undefined;

    function loadPanelContent() {
      if (!(dialogContent instanceof HTMLElement)) {
        return;
      }

      if (!p) {
        // Fetch only if the promise has not started
        console.log(`Fetching block ${cortinaBlockId}`);
        p = fetch(`/cm/${cortinaBlockId}?l=${lang}`).then((r) => r.text());
      }

      p.then((body) => {
        dialogContent.innerHTML = body;
      });
    }

    menuItem.addEventListener("mouseover", loadPanelContent);
    menuItem.addEventListener("click", loadPanelContent);
  });
</script>
